{
  "version": 3,
  "sources": ["../../react-chartjs-2/src/utils.ts", "../../react-chartjs-2/src/chart.tsx", "../../react-chartjs-2/src/typedCharts.tsx"],
  "sourcesContent": ["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  chart.options = { ...nextOptions };\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n", "import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, TypedChartComponent } from './types';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    ...props\n  }: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  type TypedChartJS = ChartJS<TType, TData, TLabel>;\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<TypedChartJS | null>();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options,\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update();\n    }\n  }, [redraw, options, data.labels, data.datasets]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas ref={canvasRef} role='img' height={height} width={width} {...props}>\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as TypedChartComponent;\n", "import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types';\nimport { Chart } from './chart';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T, true>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],
  "mappings": "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",
  "names": []
}
